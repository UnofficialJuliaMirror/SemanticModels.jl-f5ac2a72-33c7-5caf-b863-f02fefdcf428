digraph G {
rankdir="LR";
1 [ label="()",];
2 [ label="Float64",];
3 [ label="(Int64, Int64)",];
4 [ label="UnitRange{Int64}",];
5 [ label="(UnionAll, DataType)",];
6 [ label="DataType",];
7 [ label="(DataType, Int64)",];
8 [ label="Int64",];
9 [ label="Bool",];
10 [ label="(Int64,)",];
11 [ label="(DataType,)",];
12 [ label="(Int64, DataType)",];
13 [ label="(Bool, Int64, Int64)",];
14 [ label="(typeof(Main.test.g), UnitRange{Int64})",];
15 [ label="Base.Generator{UnitRange{Int64},typeof(Main.test.g)}",];
16 [ label="(Base.Generator{UnitRange{Int64},typeof(Main.test.g)},)",];
17 [ label="Array{Float64,1}",];
18 [ label="(UnitRange{Int64},)",];
19 [ label="Base.HasShape{1}",];
20 [ label="(UnionAll, Int64)",];
21 [ label="(Base.Generator{UnitRange{Int64},typeof(Main.test.g)}, UnionAll)",];
22 [ label="(typeof(Main.test.g), UnionAll)",];
23 [ label="(DataType, DataType)",];
24 [ label="(typeof(first), DataType)",];
25 [ label="(Base.HasShape{1}, DataType)",];
26 [ label="Tuple{Float64,Int64}",];
27 [ label="(Tuple{Float64,Int64}, Nothing)",];
28 [ label="(Tuple{Float64,Int64}, Int64)",];
29 [ label="(Tuple{Float64,Int64}, Int64, Int64)",];
30 [ label="(Float64, Int64)",];
31 [ label="Tuple{Int64,Int64}",];
32 [ label="(Tuple{Int64,Int64}, Int64)",];
33 [ label="(Float64,)",];
34 [ label="(DataType, UnitRange{Int64}, Base.HasShape{1})",];
35 [ label="(UnionAll, DataType, Int64)",];
36 [ label="Tuple{Base.OneTo{Int64}}",];
37 [ label="Tuple{Int64}",];
38 [ label="Tuple{Int64,Bool}",];
39 [ label="(Tuple{Int64,Bool}, Int64)",];
40 [ label="(Tuple{Int64,Bool}, Int64, Int64)",];
41 [ label="Tuple{Bool,Int64}",];
42 [ label="(Bool, Int64)",];
43 [ label="(Tuple{Bool,Int64}, Int64)",];
44 [ label="(UnionAll, Tuple{Int64})",];
45 [ label="(Tuple{Int64}, Int64)",];
46 [ label="(Tuple{Int64}, Int64, Bool)",];
47 [ label="Base.OneTo{Int64}",];
48 [ label="(Base.OneTo{Int64},)",];
49 [ label="(DataType, Tuple{Base.OneTo{Int64}})",];
50 [ label="(Tuple{Base.OneTo{Int64}},)",];
51 [ label="(typeof(Base.to_shape), Tuple{Base.OneTo{Int64}})",];
52 [ label="(Tuple{Base.OneTo{Int64}}, Int64)",];
53 [ label="(Tuple{Base.OneTo{Int64}}, Int64, Bool)",];
54 [ label="(Tuple{Int64}, UnionAll)",];
55 [ label="(DataType, Tuple{Int64})",];
56 [ label="(UndefInitializer, Tuple{Int64})",];
57 [ label="(UndefInitializer, Int64)",];
58 [ label="(Array{Float64,1}, Float64, Base.Generator{UnitRange{Int64},typeof(Main.test.g)}, Int64)",];
59 [ label="(Array{Float64,1},)",];
60 [ label="LinearIndices{1,Tuple{Base.OneTo{Int64}}}",];
61 [ label="(LinearIndices{1,Tuple{Base.OneTo{Int64}}},)",];
62 [ label="(Array{Float64,1}, Float64, Int64)",];
63 [ label="(DataType, Float64)",];
64 [ label="(Float64, DataType)",];
65 [ label="(Bool, Array{Float64,1}, Float64, Int64)",];
66 [ label="(Array{Float64,1}, Base.Generator{UnitRange{Int64},typeof(Main.test.g)}, Int64, Int64)",];
67 [ label="(Base.Generator{UnitRange{Int64},typeof(Main.test.g)}, Int64)",];
68 [ label="Nothing",];
69 [ label="(Nothing, Nothing)",];
1 -> 2 [ label="Main.test.main", ]
1 -> 19 [ label="Base.HasShape{1}", ]
3 -> 4 [ label="Colon()", ]
3 -> 8 [ label="Base.unitrange_last", ]
3 -> 9 [ label="&gt;=", ]
3 -> 31 [ label="tuple", ]
3 -> 38 [ label="Base.Checked.sub_with_overflow", ]
5 -> 6 [ label="Core.apply_type", ]
7 -> 8 [ label="convert", ]
10 -> 8 [ label="oneunit", ]
10 -> 37 [ label="tuple", ]
10 -> 47 [ label="Base.OneTo", ]
11 -> 8 [ label="one", ]
11 -> 19 [ label="Base.IteratorSize", ]
12 -> 8 [ label="typeassert", ]
13 -> 8 [ label="ifelse", ]
14 -> 15 [ label="Base.Generator", ]
16 -> 6 [ label="typeof", ]
16 -> 17 [ label="collect", ]
16 -> 26 [ label="iterate", ]
18 -> 6 [ label="typeof", ]
18 -> 8 [ label="length", ]
18 -> 19 [ label="Base.IteratorSize", ]
18 -> 36 [ label="axes", ]
18 -> 37 [ label="size", ]
20 -> 6 [ label="Core.apply_type", ]
21 -> 9 [ label="isa", ]
22 -> 9 [ label="isa", ]
23 -> 6 [ label="Core.apply_type", ]
24 -> 6 [ label="Core.Compiler.return_type", ]
25 -> 9 [ label="isa", ]
27 -> 9 [ label="===", ]
28 -> 2 [ label="getfield", ]
28 -> 8 [ label="getfield", ]
28 -> 26 [ label="Base.indexed_iterate", ]
29 -> 26 [ label="Base.indexed_iterate", ]
29 -> 31 [ label="Base.indexed_iterate", ]
30 -> 26 [ label="tuple", ]
32 -> 8 [ label="getfield", ]
33 -> 6 [ label="typeof", ]
34 -> 17 [ label="Base._array_for", ]
35 -> 6 [ label="Core.apply_type", ]
39 -> 8 [ label="getfield", ]
39 -> 9 [ label="getfield", ]
39 -> 31 [ label="Base.indexed_iterate", ]
40 -> 31 [ label="Base.indexed_iterate", ]
40 -> 41 [ label="Base.indexed_iterate", ]
42 -> 41 [ label="tuple", ]
43 -> 9 [ label="getfield", ]
44 -> 36 [ label="map", ]
45 -> 8 [ label="getindex", ]
46 -> 8 [ label="getfield", ]
48 -> 8 [ label="Base.to_shape", ]
48 -> 36 [ label="tuple", ]
48 -> 37 [ label="size", ]
48 -> 47 [ label="Base.axes1", ]
49 -> 17 [ label="similar", ]
50 -> 37 [ label="Base.to_shape", ]
51 -> 37 [ label="map", ]
52 -> 47 [ label="getindex", ]
53 -> 47 [ label="getfield", ]
54 -> 37 [ label="typeassert", ]
55 -> 17 [ label="similar", ]
56 -> 17 [ label="Array{Float64,1}", ]
57 -> 17 [ label="Array{Float64,1}", ]
58 -> 17 [ label="Base.collect_to_with_first!", ]
59 -> 2 [ label="sum", ]
59 -> 60 [ label="LinearIndices", ]
61 -> 8 [ label="first", ]
62 -> 17 [ label="setindex!", ]
63 -> 2 [ label="convert", ]
64 -> 2 [ label="typeassert", ]
64 -> 9 [ label="isa", ]
65 -> 17 [ label="Core.arrayset", ]
66 -> 17 [ label="Base.collect_to!", ]
67 -> 26 [ label="iterate", ]
67 -> 68 [ label="iterate", ]
69 -> 9 [ label="===", ]
}
