digraph G {
1 [ label="()",];
2 [ label="missing",];
3 [ label="OrdinaryDiffEq.ODECompositeSolution{Float64,2,Array{Array{Float64,1},1},Nothing,Nothing,Array{Float64,1},Array{Array{Array{Float64,1},1},1},ODEProblem{Array{Float64,1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing,DiffEqBase.StandardODEProblem},CompositeAlgorithm{Tuple{Tsit5,Rosenbrock23{0,false,LinSolveFactorize{typeof(LinearAlgebra.lu!)},DataType}},AutoSwitch{Tsit5,Rosenbrock23{0,false,LinSolveFactorize{typeof(LinearAlgebra.lu!)},DataType},Rational{Int64},Float64}},OrdinaryDiffEq.CompositeInterpolationData{ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Array{Float64,1},1},Array{Float64,1},Array{Array{Array{Float64,1},1},1},OrdinaryDiffEq.CompositeCache{Tuple{OrdinaryDiffEq.Tsit5Cache{Array{Float64,1},Array{Float64,1},Array{Float64,1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}},OrdinaryDiffEq.Rosenbrock23Cache{Array{Float64,1},Array{Float64,1},Array{Float64,2},Array{Float64,2},OrdinaryDiffEq.Rosenbrock23ConstantCache{Float64,typeof(identity),typeof(identity)},DiffEqDiffTools.TimeGradientWrapper{ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Float64,1},Array{Float64,1}},DiffEqDiffTools.UJacobianWrapper{ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Float64,Array{Float64,1}},LinSolveFactorize{typeof(LinearAlgebra.lu!)},DiffEqDiffTools.JacobianCache{Array{Float64,1},Array{Float64,1},Array{Float64,1},Val{:central},Float64,Val{true}},DiffEqDiffTools.GradientCache{Nothing,Array{Float64,1},Array{Float64,1},Val{:central},Float64,Val{true}}}},AutoSwitch{Tsit5,Rosenbrock23{0,false,LinSolveFactorize{typeof(LinearAlgebra.lu!)},DataType},Rational{Int64},Float64}}}}",];
4 [ label="(Float64, Float64)",];
5 [ label="Array{Float64,1}",];
6 [ label="(Float64, Float64, Float64)",];
7 [ label="Tuple{Float64,Float64}",];
8 [ label="(typeof(Main.test.sir_ode), Array{Float64,1}, Tuple{Float64,Float64}, Array{Float64,1})",];
9 [ label="ODEProblem{Array{Float64,1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing,DiffEqBase.StandardODEProblem}",];
10 [ label="(UnionAll, Tuple{Symbol})",];
11 [ label="UnionAll",];
12 [ label="(Float64,)",];
13 [ label="Tuple{Float64}",];
14 [ label="(Tuple{Float64},)",];
15 [ label="NamedTuple{(:saveat,),Tuple{Float64}}",];
16 [ label="(typeof(solve),)",];
17 [ label="getfield(DiffEqBase, Symbol(#kw##solve))",];
18 [ label="(NamedTuple{(:saveat,),Tuple{Float64}}, typeof(solve), ODEProblem{Array{Float64,1},Tuple{Float64,Float64},true,Array{Float64,1},ODEFunction{true,typeof(Main.test.sir_ode),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Nothing,DiffEqBase.StandardODEProblem})",];
1 -> 2 [ label="missing", ]
1 -> 3 [ label="Main.test.main", ]
4 -> 5 [ label="Base.vect", ]
4 -> 7 [ label="tuple", ]
6 -> 5 [ label="Base.vect", ]
8 -> 9 [ label="ODEProblem", ]
10 -> 11 [ label="Core.apply_type", ]
12 -> 13 [ label="tuple", ]
14 -> 15 [ label="NamedTuple{(:saveat,),T} where T<:Tuple", ]
16 -> 17 [ label="Core.kwfunc", ]
18 -> 3 [ label="getfield(DiffEqBase, Symbol(#kw##solve))()", ]
}
